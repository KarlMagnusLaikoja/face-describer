# -*- coding: utf-8 -*-
"""Bakatöö esindajate leidmine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1msDLVD4RQ4cn67REKLbQXBnPB0-D2PJ7
"""

!pip install opencv-python
!pip install extcolors
!pip install face-recognition
import cv2
import extcolors
import math
from PIL import Image
import os
import face_recognition

from google.colab import drive
from google.colab.patches import cv2_imshow

drive.mount('/content/drive')
os.chdir("/content/drive/My Drive/Colab Notebooks")

"""# Nahavärv - keskmise RGB väärtus võrdlemine esindajatega. Esindaja saab olema RGB väärtus, mille leitakse esindajate piltide keskmise RGB väärtuse arvutamise teel."""

os.chdir("skincolours")

#https://dermnetnz.org/topics/skin-phototype
pale_white = cv2.imread('pale white.png')
fair = cv2.imread('fair.png')
darker_white = cv2.imread('darker white.png')
light_brown = cv2.imread('light brown.png')
brown = cv2.imread('brown.png')
dark_brown_or_black = cv2.imread('dark brown or black.png')
cv2_imshow(pale_white)
cv2_imshow(fair)
cv2_imshow(darker_white)
cv2_imshow(light_brown)
cv2_imshow(brown)
cv2_imshow(dark_brown_or_black)

#BGR->RGB conversion
pale_white = cv2.cvtColor(pale_white, cv2.COLOR_BGR2RGB)
fair = cv2.cvtColor(fair, cv2.COLOR_BGR2RGB)
darker_white = cv2.cvtColor(darker_white, cv2.COLOR_BGR2RGB)
light_brown = cv2.cvtColor(light_brown, cv2.COLOR_BGR2RGB)
brown = cv2.cvtColor(brown, cv2.COLOR_BGR2RGB)
dark_brown_or_black = cv2.cvtColor(dark_brown_or_black, cv2.COLOR_BGR2RGB)

import numpy as np
def getAverageRGB(image):
  colours = []
  for i in range(len(image)):
    for j in range(len(image[i])):
      colours.append(image[i][j])

  #Find the average
  rTotal = 0
  gTotal = 0
  bTotal = 0
  for (r, g, b) in colours:
    rTotal+=r
    gTotal+=g
    bTotal+=b

  r = np.round(rTotal/len(colours))
  g = np.round(gTotal/len(colours))
  b = np.round(bTotal/len(colours))
  return (r, g, b)

print(getAverageRGB(pale_white))
print(getAverageRGB(fair))
print(getAverageRGB(darker_white))
print(getAverageRGB(light_brown))
print(getAverageRGB(brown))
print(getAverageRGB(dark_brown_or_black))

"""# Silmavärv - keskmise RGB väärtus võrdlemine esindajatega. Esindaja saab olema RGB väärtus, mille leitakse esindajate piltide keskmise RGB väärtuse arvutamise teel."""

os.chdir("../eyecolours")

#https://www.edow.com/general-eye-care/eyecolor/
blue = cv2.imread('blue.png')
brown = cv2.imread('brown.png')
green = cv2.imread('green.png')
grey = cv2.imread('grey.png')
hazel = cv2.imread('hazel.png')
red = cv2.imread('red.png')
cv2_imshow(blue)
cv2_imshow(brown)
cv2_imshow(green)
cv2_imshow(grey)
cv2_imshow(hazel)
cv2_imshow(red)

#BGR->RGB conversion
blue = cv2.cvtColor(blue, cv2.COLOR_BGR2RGB)
brown = cv2.cvtColor(brown, cv2.COLOR_BGR2RGB)
green = cv2.cvtColor(green, cv2.COLOR_BGR2RGB)
grey = cv2.cvtColor(grey, cv2.COLOR_BGR2RGB)
hazel = cv2.cvtColor(hazel, cv2.COLOR_BGR2RGB)
red = cv2.cvtColor(red, cv2.COLOR_BGR2RGB)

print(getAverageRGB(blue))
print(getAverageRGB(brown))
print(getAverageRGB(green))
print(getAverageRGB(grey))
print(getAverageRGB(hazel))
print(getAverageRGB(red))

"""# Näo kuju - šabloonipõhine võrdlus esindajatega. Esindaja saab olema šabloon, mis on nägu pildist välja lõigatuna, ilma ühegi värvita.


"""

os.chdir("../faceshapes")

#https://www.researchgate.net/figure/Common-face-shape-categories_fig4_320111932
diamond = cv2.imread('diamond.png')
oblong = cv2.imread('oblong.png')
oval = cv2.imread('oval.png')
round = cv2.imread('round.png')
square = cv2.imread('square.png')
cv2_imshow(diamond)
cv2_imshow(oblong)
cv2_imshow(oval)
cv2_imshow(round)
cv2_imshow(square)

def gatherCoordinates(img):
  result = face_recognition.face_landmarks(img)[0]
  coordinates = []
  for k, v in result.items():
      for (x, y) in v:
          coordinates.append((x, y))
  return coordinates

diamondCoordinates = gatherCoordinates(diamond)
oblongCoordinates = gatherCoordinates(oblong)
ovalCoordinates = gatherCoordinates(oval)
roundCoordinates = gatherCoordinates(round)
squareCoordinates = gatherCoordinates(square)

def getFaceShapeTemplate(img, coordinates):
  result = img[
      coordinates[24][1]:coordinates[8][1],
      coordinates[0][0]:coordinates[16][0]
  ]
  #Grayscaling
  result = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)

  #Contouring
  thresh, BW = cv2.threshold(result,0,255,cv2.THRESH_BINARY + cv2.THRESH_OTSU)
  contours, hierarchy = cv2.findContours(BW, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  result = cv2.cvtColor(result, cv2.COLOR_GRAY2BGR)
  result = cv2.drawContours(result,contours, -1,(0,0,255),1)

  #Color everything other than the contour (0,0,255) black
  rows,cols,_ = result.shape
  for i in range(rows):
      for j in range(cols):
          if(not(result[i,j][0] == 0 and result[i,j][1] == 0 and result[i,j][2] == 255)):
            result[i,j] = [0,0,0]
  return result

diamondTemplate = getFaceShapeTemplate(diamond, diamondCoordinates)
oblongTemplate = getFaceShapeTemplate(oblong, oblongCoordinates)
ovalTemplate = getFaceShapeTemplate(oval, ovalCoordinates)
roundTemplate = getFaceShapeTemplate(round, roundCoordinates)
squareTemplate = getFaceShapeTemplate(square, squareCoordinates)

cv2_imshow(diamondTemplate)
cv2_imshow(oblongTemplate)
cv2_imshow(ovalTemplate)
cv2_imshow(roundTemplate)
cv2_imshow(squareTemplate)

#Resize images to smallest dimensions (110, 110)
templates = [diamondTemplate, oblongTemplate, ovalTemplate, roundTemplate, squareTemplate]
for template in templates:
  print(template.shape)

resized = []
for template in templates:
  template = cv2.resize(template, (110, 110))
  cv2_imshow(template)
  resized.append(template)

os.chdir("templates")
i=0
names = ["diamond.png", "oblong.png", "oval.png", "round.png", "square.png"]
for template in resized:
  print(names[i])
  cv2.imwrite(names[i], template)
  i+=1

"""# Näokarvade värv - keskmise RGB väärtus võrdlemine esindajatega. Esindaja saab olema RGB väärtus, mille leitakse esindajate piltide keskmise RGB väärtuse arvutamise teel."""

os.chdir("../facialhaircolours")

#https://www.researchgate.net/figure/Number-and-percentages-of-hair-colours-in-the-UK-Biobank-cohort-by-gender_tbl1_329405511
#Juuksevärvi (siis ka näokarvade värvi) saab kategoriseerida järgnevalt:
#punane
#blond
#helepruun, tumepruun - lihtsutaks üheks kategooriaks "pruun"
#must
#muu (ilmselge laiendus - hall/valge)

#Piltideks on valitud kõige eristatavamad eksemplarid, mida leiab avalikust domeenist
red_hair = cv2.imread('red_hair.png') #https://i.pinimg.com/originals/c9/2d/72/c92d72694281843fed7514681a86ebf7.jpg
blonde_hair = cv2.imread('blonde_hair.png') #https://i.pinimg.com/564x/36/a9/f7/36a9f7bb6641de1cfe56a9af8e7774c4.jpg
brown_hair = cv2.imread('brown_hair.png') #https://media.gq.com/photos/5730be2cc779e9c54a94bb90/4:3/w_2000,h_1500,c_limit/justin-timberlake-beard-sq.jpg
black_hair = cv2.imread('black_hair.png') #https://cdn-jlckb.nitrocdn.com/MBMlXoBNBvpigtFuyeWTsKbzBQzwIFoS/assets/images/optimized/rev-c12bc29/blackmenbeards.com/wp-content/uploads/2019/11/Bigen.jpg
grey_hair = cv2.imread('grey_hair.png') #https://us.images.westend61.de/0000697360pw/portrait-of-man-with-grey-beard-wearing-spectacles-and-hat-RHF001135.jpg
cv2_imshow(red_hair)
cv2_imshow(blonde_hair)
cv2_imshow(brown_hair)
cv2_imshow(black_hair)
cv2_imshow(grey_hair)

#BGR->RGB conversion
red_hair = cv2.cvtColor(red_hair, cv2.COLOR_BGR2RGB)
blonde_hair = cv2.cvtColor(blonde_hair, cv2.COLOR_BGR2RGB)
brown_hair = cv2.cvtColor(brown_hair, cv2.COLOR_BGR2RGB)
black_hair = cv2.cvtColor(black_hair, cv2.COLOR_BGR2RGB)
grey_hair = cv2.cvtColor(grey_hair, cv2.COLOR_BGR2RGB)

print(getAverageRGB(red_hair))
print(getAverageRGB(blonde_hair))
print(getAverageRGB(brown_hair))
print(getAverageRGB(black_hair))
print(getAverageRGB(grey_hair))

"""# Nina kuju - mallipõhine sobitamine"""

os.chdir("../noseshapes")

#https://centreforsurgery.com/what-are-the-different-types-of-nose-shapes/
greek = cv2.imread('greek_nose.png') #https://hips.hearstapps.com/hmg-prod/images/gettyimages-1155287765.jpg?crop=1xw:1.0xh;center,top&resize=640:*
roman = cv2.imread('roman_nose.png') #https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Ryan_Gosling_in_2018.jpg/640px-Ryan_Gosling_in_2018.jpg
hawk = cv2.imread('hawk_nose.png') #https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/68916_v9_bb.jpg
button = cv2.imread('button_nose.png') #https://img.a.transfermarkt.technology/portrait/big/86680-1696920093.jpg?lm=1
nubian = cv2.imread('nubian_nose.png') #https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Official_portrait_of_Barack_Obama.jpg/220px-Official_portrait_of_Barack_Obama.jpg
upturned = cv2.imread('upturned_nose.png') #https://images.mubicdn.net/images/cast_member/51060/cache-2852-1482873231/image-w856.jpg?size=800x
crooked = cv2.imread('crooked_nose.png') #https://hips.hearstapps.com/hmg-prod/images/actor-owen-wilson-attends-the-premiere-of-disney-pixars-news-photo-1700157512.jpg
bulbous = cv2.imread('bulbous_nose.png') #https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Bill_Clinton.jpg/640px-Bill_Clinton.jpg
fleshy = cv2.imread('fleshy_nose.png') #https://hips.hearstapps.com/hmg-prod/images/gettyimages-1204486984.jpg?crop=1xw:0.9960159362549801xh;center,top&resize=1200:*
east_asian = cv2.imread('east_asian_nose.png') #https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Jackie_Chan_by_Gage_Skidmore.jpg/640px-Jackie_Chan_by_Gage_Skidmore.jpg
cv2_imshow(greek)
cv2_imshow(roman)
cv2_imshow(hawk)
cv2_imshow(button)
cv2_imshow(nubian)
cv2_imshow(upturned)
cv2_imshow(crooked)
cv2_imshow(bulbous)
cv2_imshow(fleshy)
cv2_imshow(east_asian)

#First get the nose from each image
greekCoordinates = gatherCoordinates(greek)
romanCoordinates = gatherCoordinates(roman)
hawkCoordinates = gatherCoordinates(hawk)
buttonCoordinates = gatherCoordinates(button)
nubianCoordinates = gatherCoordinates(nubian)
upturnedCoordinates = gatherCoordinates(upturned)
crookedCoordinates = gatherCoordinates(crooked)
bulbousCoordinates = gatherCoordinates(bulbous)
fleshyCoordinates = gatherCoordinates(fleshy)
east_asianCoordinates = gatherCoordinates(east_asian)

def getNose(img, coordinates):
  return img[
      coordinates[27][1]:coordinates[33+1][1],
      coordinates[39][0]:coordinates[41+1][0]
  ]

greek_nose = getNose(greek, greekCoordinates)
roman_nose = getNose(roman, romanCoordinates)
hawk_nose = getNose(hawk, hawkCoordinates)
button_nose = getNose(button, buttonCoordinates)
nubian_nose = getNose(nubian, nubianCoordinates)
upturned_nose = getNose(upturned, upturnedCoordinates)
crooked_nose = getNose(crooked, crookedCoordinates)
bulbous_nose = getNose(bulbous, bulbousCoordinates)
fleshy_nose = getNose(fleshy, fleshyCoordinates)
east_asian_nose = getNose(east_asian, east_asianCoordinates)

cv2_imshow(greek_nose)
cv2_imshow(roman_nose)
cv2_imshow(hawk_nose)
cv2_imshow(button_nose)
cv2_imshow(nubian_nose)
cv2_imshow(upturned_nose)
cv2_imshow(crooked_nose)
cv2_imshow(bulbous_nose)
cv2_imshow(fleshy_nose)
cv2_imshow(east_asian_nose)
#Resize the images according to the smallest one
nose_shapes = [greek_nose, roman_nose, hawk_nose, button_nose, nubian_nose, upturned_nose, crooked_nose, bulbous_nose, fleshy_nose, east_asian_nose]
for img in nose_shapes:
  print(img.shape)

resized = []
for img in nose_shapes:
  img = cv2.resize(img, (30, 25))
  cv2_imshow(img)
  resized.append(img)

#Greyscaling
# Note: Noses have a lot more contours compared to face shape so the contouring approach is much more difficult
# It should be good enough to just greyscale the templates and compare those to the greyscaled input image
# (all templates should lose on accuracy somewhat equally due to the missing contours)
templates = [cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) for img in resized]

os.chdir("templates")
names = ["greek_nose.png", "roman_nose.png", "hawk_nose.png", "button_nose.png", "nubian_nose.png", "upturned_nose.png", "crooked_nose.png", "bulbous_nose.png", "fleshy_nose.png", "east_asian_nose.png"]
i = 0
for img in templates:
  cv2_imshow(img)
  print(names[i])
  cv2.imwrite(names[i], img)
  i+=1